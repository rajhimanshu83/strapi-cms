"""blog"""
type Articles {
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  content: String!
  image: UploadFile
  category: String
  tag: String
  author: String
  highlights: String
}

type ArticlesAggregator {
  count: Int
  totalCount: Int
}

type ArticlesConnection {
  values: [Articles]
  groupBy: ArticlesGroupBy
  aggregate: ArticlesAggregator
}

type ArticlesConnection_id {
  key: ID
  connection: ArticlesConnection
}

type ArticlesConnectionAuthor {
  key: String
  connection: ArticlesConnection
}

type ArticlesConnectionCategory {
  key: String
  connection: ArticlesConnection
}

type ArticlesConnectionContent {
  key: String
  connection: ArticlesConnection
}

type ArticlesConnectionCreatedAt {
  key: DateTime
  connection: ArticlesConnection
}

type ArticlesConnectionHighlights {
  key: String
  connection: ArticlesConnection
}

type ArticlesConnectionId {
  key: ID
  connection: ArticlesConnection
}

type ArticlesConnectionImage {
  key: ID
  connection: ArticlesConnection
}

type ArticlesConnectionTag {
  key: String
  connection: ArticlesConnection
}

type ArticlesConnectionTitle {
  key: String
  connection: ArticlesConnection
}

type ArticlesConnectionUpdatedAt {
  key: DateTime
  connection: ArticlesConnection
}

type ArticlesGroupBy {
  _id: [ArticlesConnection_id]
  id: [ArticlesConnectionId]
  createdAt: [ArticlesConnectionCreatedAt]
  updatedAt: [ArticlesConnectionUpdatedAt]
  title: [ArticlesConnectionTitle]
  content: [ArticlesConnectionContent]
  image: [ArticlesConnectionImage]
  category: [ArticlesConnectionCategory]
  tag: [ArticlesConnectionTag]
  author: [ArticlesConnectionAuthor]
  highlights: [ArticlesConnectionHighlights]
}

input ArticlesInput {
  title: String!
  content: String!
  image: ID
  category: String
  tag: String
  author: String
  highlights: String
}

input createArticlesInput {
  data: ArticlesInput
}

type createArticlesPayload {
  article: Articles
}

input createPopularsmartphoneweekInput {
  data: PopularsmartphoneweekInput
}

type createPopularsmartphoneweekPayload {
  popularsmartphoneweek: Popularsmartphoneweek
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createSmartphonesInput {
  data: SmartphonesInput
}

type createSmartphonesPayload {
  smartphone: Smartphones
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteArticlesInput {
  where: InputID
}

type deleteArticlesPayload {
  article: Articles
}

input deletePopularsmartphoneweekInput {
  where: InputID
}

type deletePopularsmartphoneweekPayload {
  popularsmartphoneweek: Popularsmartphoneweek
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteSmartphonesInput {
  where: InputID
}

type deleteSmartphonesPayload {
  smartphone: Smartphones
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editArticlesInput {
  title: String
  content: String
  image: ID
  category: String
  tag: String
  author: String
  highlights: String
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: String
  url: String
  provider: String
  public_id: String
  related: [ID]
}

input editPopularsmartphoneweekInput {
  smartphones: [ID]
  week: DateTime
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editSmartphonesInput {
  name: String
  popularsmartphoneweek: ID
  speed: String
  announced: String
  availability: String
  dimensions: String
  weight: String
  sim: String
  formfactor: String
  size: String
  resolution: String
  os: String
  chipset: String
  cpu: String
  gpu: String
  cardslot: String
  internal: String
  camera: String
  loudspeaker: String
  headjack: String
  launchprice: String
  wlan: String
  bluetooth: String
  nfc: String
  gps: String
  radio: String
  usb: String
  sensors: String
  battery: String
  colors: String
  models: String
  sar: String
  currentprice: String
  performance: String
  display: String
  batterylife: String
  network: String
  images: [ID]
  secondary_camera: String
  thumbnail: ID
  _2gband: String
  _3gband: String
  _4gband: String
  _5gband: String
  build: String
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Articles | createArticlesPayload | updateArticlesPayload | deleteArticlesPayload | ArticlesConnection | ArticlesAggregator | ArticlesGroupBy | ArticlesConnection_id | ArticlesConnectionId | ArticlesConnectionCreatedAt | ArticlesConnectionUpdatedAt | ArticlesConnectionTitle | ArticlesConnectionContent | ArticlesConnectionImage | ArticlesConnectionCategory | ArticlesConnectionTag | ArticlesConnectionAuthor | ArticlesConnectionHighlights | Popularsmartphoneweek | createPopularsmartphoneweekPayload | updatePopularsmartphoneweekPayload | deletePopularsmartphoneweekPayload | PopularsmartphoneweekConnection | PopularsmartphoneweekAggregator | PopularsmartphoneweekGroupBy | PopularsmartphoneweekConnection_id | PopularsmartphoneweekConnectionId | PopularsmartphoneweekConnectionCreatedAt | PopularsmartphoneweekConnectionUpdatedAt | PopularsmartphoneweekConnectionWeek | Smartphones | createSmartphonesPayload | updateSmartphonesPayload | deleteSmartphonesPayload | SmartphonesConnection | SmartphonesAggregator | SmartphonesGroupBy | SmartphonesConnection_id | SmartphonesConnectionId | SmartphonesConnectionCreatedAt | SmartphonesConnectionUpdatedAt | SmartphonesConnectionName | SmartphonesConnectionPopularsmartphoneweek | SmartphonesConnectionSpeed | SmartphonesConnectionAnnounced | SmartphonesConnectionAvailability | SmartphonesConnectionDimensions | SmartphonesConnectionWeight | SmartphonesConnectionSim | SmartphonesConnectionFormfactor | SmartphonesConnectionSize | SmartphonesConnectionResolution | SmartphonesConnectionOs | SmartphonesConnectionChipset | SmartphonesConnectionCpu | SmartphonesConnectionGpu | SmartphonesConnectionCardslot | SmartphonesConnectionInternal | SmartphonesConnectionCamera | SmartphonesConnectionLoudspeaker | SmartphonesConnectionHeadjack | SmartphonesConnectionLaunchprice | SmartphonesConnectionWlan | SmartphonesConnectionBluetooth | SmartphonesConnectionNfc | SmartphonesConnectionGps | SmartphonesConnectionRadio | SmartphonesConnectionUsb | SmartphonesConnectionSensors | SmartphonesConnectionBattery | SmartphonesConnectionColors | SmartphonesConnectionModels | SmartphonesConnectionSar | SmartphonesConnectionCurrentprice | SmartphonesConnectionPerformance | SmartphonesConnectionDisplay | SmartphonesConnectionBatterylife | SmartphonesConnectionNetwork | SmartphonesConnectionSecondary_camera | SmartphonesConnectionThumbnail | SmartphonesConnection_2gband | SmartphonesConnection_3gband | SmartphonesConnection_4gband | SmartphonesConnection_5gband | SmartphonesConnectionBuild | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnection_id | UploadFileConnectionId | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UploadFileConnectionPublic_id | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole

type Mutation {
  createArticles(input: createArticlesInput): createArticlesPayload
  updateArticles(input: updateArticlesInput): updateArticlesPayload
  deleteArticles(input: deleteArticlesInput): deleteArticlesPayload
  createPopularsmartphoneweek(input: createPopularsmartphoneweekInput): createPopularsmartphoneweekPayload
  updatePopularsmartphoneweek(input: updatePopularsmartphoneweekInput): updatePopularsmartphoneweekPayload
  deletePopularsmartphoneweek(input: deletePopularsmartphoneweekInput): deletePopularsmartphoneweekPayload
  createSmartphones(input: createSmartphonesInput): createSmartphonesPayload
  updateSmartphones(input: updateSmartphonesInput): updateSmartphonesPayload
  deleteSmartphones(input: deleteSmartphonesInput): deleteSmartphonesPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

"""popular this week"""
type Popularsmartphoneweek {
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  week: DateTime
  smartphones(sort: String, limit: Int, start: Int, where: JSON): [Smartphones]
}

type PopularsmartphoneweekAggregator {
  count: Int
  totalCount: Int
}

type PopularsmartphoneweekConnection {
  values: [Popularsmartphoneweek]
  groupBy: PopularsmartphoneweekGroupBy
  aggregate: PopularsmartphoneweekAggregator
}

type PopularsmartphoneweekConnection_id {
  key: ID
  connection: PopularsmartphoneweekConnection
}

type PopularsmartphoneweekConnectionCreatedAt {
  key: DateTime
  connection: PopularsmartphoneweekConnection
}

type PopularsmartphoneweekConnectionId {
  key: ID
  connection: PopularsmartphoneweekConnection
}

type PopularsmartphoneweekConnectionUpdatedAt {
  key: DateTime
  connection: PopularsmartphoneweekConnection
}

type PopularsmartphoneweekConnectionWeek {
  key: DateTime
  connection: PopularsmartphoneweekConnection
}

type PopularsmartphoneweekGroupBy {
  _id: [PopularsmartphoneweekConnection_id]
  id: [PopularsmartphoneweekConnectionId]
  createdAt: [PopularsmartphoneweekConnectionCreatedAt]
  updatedAt: [PopularsmartphoneweekConnectionUpdatedAt]
  week: [PopularsmartphoneweekConnectionWeek]
}

input PopularsmartphoneweekInput {
  smartphones: [ID]
  week: DateTime
}

type Query {
  article(id: ID!): Articles
  articles(sort: String, limit: Int, start: Int, where: JSON): [Articles]
  articlesConnection(sort: String, limit: Int, start: Int, where: JSON): ArticlesConnection
  popularsmartphoneweek(id: ID!): Popularsmartphoneweek
  popularsmartphoneweeks(sort: String, limit: Int, start: Int, where: JSON): [Popularsmartphoneweek]
  popularsmartphoneweeksConnection(sort: String, limit: Int, start: Int, where: JSON): PopularsmartphoneweekConnection
  smartphone(id: ID!): Smartphones
  smartphones(sort: String, limit: Int, start: Int, where: JSON): [Smartphones]
  smartphonesConnection(sort: String, limit: Int, start: Int, where: JSON): SmartphonesConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

"""smartphones database"""
type Smartphones {
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  popularsmartphoneweek: Popularsmartphoneweek
  speed: String
  announced: String
  availability: String
  dimensions: String
  weight: String
  sim: String
  formfactor: String
  size: String
  resolution: String
  os: String
  chipset: String
  cpu: String
  gpu: String
  cardslot: String
  internal: String
  camera: String
  loudspeaker: String
  headjack: String
  launchprice: String
  wlan: String
  bluetooth: String
  nfc: String
  gps: String
  radio: String
  usb: String
  sensors: String
  battery: String
  colors: String
  models: String
  sar: String
  currentprice: String
  performance: String
  display: String
  batterylife: String
  network: String
  secondary_camera: String
  thumbnail: UploadFile
  _2gband: String
  _3gband: String
  _4gband: String
  _5gband: String
  build: String
  images(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

type SmartphonesAggregator {
  count: Int
  totalCount: Int
}

type SmartphonesConnection {
  values: [Smartphones]
  groupBy: SmartphonesGroupBy
  aggregate: SmartphonesAggregator
}

type SmartphonesConnection_2gband {
  key: String
  connection: SmartphonesConnection
}

type SmartphonesConnection_3gband {
  key: String
  connection: SmartphonesConnection
}

type SmartphonesConnection_4gband {
  key: String
  connection: SmartphonesConnection
}

type SmartphonesConnection_5gband {
  key: String
  connection: SmartphonesConnection
}

type SmartphonesConnection_id {
  key: ID
  connection: SmartphonesConnection
}

type SmartphonesConnectionAnnounced {
  key: String
  connection: SmartphonesConnection
}

type SmartphonesConnectionAvailability {
  key: String
  connection: SmartphonesConnection
}

type SmartphonesConnectionBattery {
  key: String
  connection: SmartphonesConnection
}

type SmartphonesConnectionBatterylife {
  key: String
  connection: SmartphonesConnection
}

type SmartphonesConnectionBluetooth {
  key: String
  connection: SmartphonesConnection
}

type SmartphonesConnectionBuild {
  key: String
  connection: SmartphonesConnection
}

type SmartphonesConnectionCamera {
  key: String
  connection: SmartphonesConnection
}

type SmartphonesConnectionCardslot {
  key: String
  connection: SmartphonesConnection
}

type SmartphonesConnectionChipset {
  key: String
  connection: SmartphonesConnection
}

type SmartphonesConnectionColors {
  key: String
  connection: SmartphonesConnection
}

type SmartphonesConnectionCpu {
  key: String
  connection: SmartphonesConnection
}

type SmartphonesConnectionCreatedAt {
  key: DateTime
  connection: SmartphonesConnection
}

type SmartphonesConnectionCurrentprice {
  key: String
  connection: SmartphonesConnection
}

type SmartphonesConnectionDimensions {
  key: String
  connection: SmartphonesConnection
}

type SmartphonesConnectionDisplay {
  key: String
  connection: SmartphonesConnection
}

type SmartphonesConnectionFormfactor {
  key: String
  connection: SmartphonesConnection
}

type SmartphonesConnectionGps {
  key: String
  connection: SmartphonesConnection
}

type SmartphonesConnectionGpu {
  key: String
  connection: SmartphonesConnection
}

type SmartphonesConnectionHeadjack {
  key: String
  connection: SmartphonesConnection
}

type SmartphonesConnectionId {
  key: ID
  connection: SmartphonesConnection
}

type SmartphonesConnectionInternal {
  key: String
  connection: SmartphonesConnection
}

type SmartphonesConnectionLaunchprice {
  key: String
  connection: SmartphonesConnection
}

type SmartphonesConnectionLoudspeaker {
  key: String
  connection: SmartphonesConnection
}

type SmartphonesConnectionModels {
  key: String
  connection: SmartphonesConnection
}

type SmartphonesConnectionName {
  key: String
  connection: SmartphonesConnection
}

type SmartphonesConnectionNetwork {
  key: String
  connection: SmartphonesConnection
}

type SmartphonesConnectionNfc {
  key: String
  connection: SmartphonesConnection
}

type SmartphonesConnectionOs {
  key: String
  connection: SmartphonesConnection
}

type SmartphonesConnectionPerformance {
  key: String
  connection: SmartphonesConnection
}

type SmartphonesConnectionPopularsmartphoneweek {
  key: ID
  connection: SmartphonesConnection
}

type SmartphonesConnectionRadio {
  key: String
  connection: SmartphonesConnection
}

type SmartphonesConnectionResolution {
  key: String
  connection: SmartphonesConnection
}

type SmartphonesConnectionSar {
  key: String
  connection: SmartphonesConnection
}

type SmartphonesConnectionSecondary_camera {
  key: String
  connection: SmartphonesConnection
}

type SmartphonesConnectionSensors {
  key: String
  connection: SmartphonesConnection
}

type SmartphonesConnectionSim {
  key: String
  connection: SmartphonesConnection
}

type SmartphonesConnectionSize {
  key: String
  connection: SmartphonesConnection
}

type SmartphonesConnectionSpeed {
  key: String
  connection: SmartphonesConnection
}

type SmartphonesConnectionThumbnail {
  key: ID
  connection: SmartphonesConnection
}

type SmartphonesConnectionUpdatedAt {
  key: DateTime
  connection: SmartphonesConnection
}

type SmartphonesConnectionUsb {
  key: String
  connection: SmartphonesConnection
}

type SmartphonesConnectionWeight {
  key: String
  connection: SmartphonesConnection
}

type SmartphonesConnectionWlan {
  key: String
  connection: SmartphonesConnection
}

type SmartphonesGroupBy {
  _id: [SmartphonesConnection_id]
  id: [SmartphonesConnectionId]
  createdAt: [SmartphonesConnectionCreatedAt]
  updatedAt: [SmartphonesConnectionUpdatedAt]
  name: [SmartphonesConnectionName]
  popularsmartphoneweek: [SmartphonesConnectionPopularsmartphoneweek]
  speed: [SmartphonesConnectionSpeed]
  announced: [SmartphonesConnectionAnnounced]
  availability: [SmartphonesConnectionAvailability]
  dimensions: [SmartphonesConnectionDimensions]
  weight: [SmartphonesConnectionWeight]
  sim: [SmartphonesConnectionSim]
  formfactor: [SmartphonesConnectionFormfactor]
  size: [SmartphonesConnectionSize]
  resolution: [SmartphonesConnectionResolution]
  os: [SmartphonesConnectionOs]
  chipset: [SmartphonesConnectionChipset]
  cpu: [SmartphonesConnectionCpu]
  gpu: [SmartphonesConnectionGpu]
  cardslot: [SmartphonesConnectionCardslot]
  internal: [SmartphonesConnectionInternal]
  camera: [SmartphonesConnectionCamera]
  loudspeaker: [SmartphonesConnectionLoudspeaker]
  headjack: [SmartphonesConnectionHeadjack]
  launchprice: [SmartphonesConnectionLaunchprice]
  wlan: [SmartphonesConnectionWlan]
  bluetooth: [SmartphonesConnectionBluetooth]
  nfc: [SmartphonesConnectionNfc]
  gps: [SmartphonesConnectionGps]
  radio: [SmartphonesConnectionRadio]
  usb: [SmartphonesConnectionUsb]
  sensors: [SmartphonesConnectionSensors]
  battery: [SmartphonesConnectionBattery]
  colors: [SmartphonesConnectionColors]
  models: [SmartphonesConnectionModels]
  sar: [SmartphonesConnectionSar]
  currentprice: [SmartphonesConnectionCurrentprice]
  performance: [SmartphonesConnectionPerformance]
  display: [SmartphonesConnectionDisplay]
  batterylife: [SmartphonesConnectionBatterylife]
  network: [SmartphonesConnectionNetwork]
  secondary_camera: [SmartphonesConnectionSecondary_camera]
  thumbnail: [SmartphonesConnectionThumbnail]
  _2gband: [SmartphonesConnection_2gband]
  _3gband: [SmartphonesConnection_3gband]
  _4gband: [SmartphonesConnection_4gband]
  _5gband: [SmartphonesConnection_5gband]
  build: [SmartphonesConnectionBuild]
}

input SmartphonesInput {
  name: String
  popularsmartphoneweek: ID
  speed: String
  announced: String
  availability: String
  dimensions: String
  weight: String
  sim: String
  formfactor: String
  size: String
  resolution: String
  os: String
  chipset: String
  cpu: String
  gpu: String
  cardslot: String
  internal: String
  camera: String
  loudspeaker: String
  headjack: String
  launchprice: String
  wlan: String
  bluetooth: String
  nfc: String
  gps: String
  radio: String
  usb: String
  sensors: String
  battery: String
  colors: String
  models: String
  sar: String
  currentprice: String
  performance: String
  display: String
  batterylife: String
  network: String
  images: [ID]
  secondary_camera: String
  thumbnail: ID
  _2gband: String
  _3gband: String
  _4gband: String
  _5gband: String
  build: String
}

input updateArticlesInput {
  where: InputID
  data: editArticlesInput
}

type updateArticlesPayload {
  article: Articles
}

input updatePopularsmartphoneweekInput {
  where: InputID
  data: editPopularsmartphoneweekInput
}

type updatePopularsmartphoneweekPayload {
  popularsmartphoneweek: Popularsmartphoneweek
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateSmartphonesInput {
  where: InputID
  data: editSmartphonesInput
}

type updateSmartphonesPayload {
  smartphone: Smartphones
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPublic_id {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSha256 {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  id: [UploadFileConnectionId]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  hash: [UploadFileConnectionHash]
  sha256: [UploadFileConnectionSha256]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  provider: [UploadFileConnectionProvider]
  public_id: [UploadFileConnectionPublic_id]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  _id: ID!
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: ID!
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  id: [UsersPermissionsUserConnectionId]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}
